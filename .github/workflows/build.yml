# This is a basic workflow to help you get started with Actions

name: VectorFun Release

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3


      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, VectorFun!


      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.1

        
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          msbuild.exe VectorFun.sln /p:platform=x64 /p:configuration=Release /t:Rebuild
          echo VectorFun Built.


      - name: Prepare release
        id: prepare_release
        run: |
          $ver = $Env:GITHUB_REF -replace 'refs/tags/v', ''
          echo "Release version: $ver"
          Write-Host "::set-output name=version::$ver"
          if ((Get-Content -Raw CHANGELOG.md) -match '(?m)^## \['+$ver+'\].*?(\r?\n.*?)+(?=^## \[)'){
            $changelog_txt = $Matches[0]
          }else{
            $changelog_txt = '['+$ver+']'
          }
          echo "Got changelog:" + $changelog_txt
          $changelog_txt = $changelog_txt.Replace('%','%25').Replace("`r",'%0D').Replace("`n",'%0A')
          Write-Host "::set-output name=changelog::$changelog_txt"
        shell: pwsh


      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.prepare_release.outputs.changelog }}
          draft: false
          prerelease: false
      - name: VectorFun Zip 
        run: 7z a -tzip ./VectorFun.zip ./VectorFun/bin/Release/*
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./VectorFun.zip
          asset_name: VectorFun.zip
          asset_content_type: application/zip
